package com.fujinbang.activity;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.Poi;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BaiduMapOptions;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.BitmapDescriptorFactory;
import com.baidu.mapapi.map.LogoPosition;
import com.baidu.mapapi.map.MapStatus;
import com.baidu.mapapi.map.MapStatusUpdate;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.MyLocationConfiguration;
import com.baidu.mapapi.map.MyLocationData;
import com.baidu.mapapi.model.LatLng;
import com.fujinbang.R;
import com.fujinbang.map.LocationStateDetermination;
import com.fujinbang.map.PositionModel;

import java.util.List;

/**
 * Created by Administrator on 2016/3/6.
 */
public class MapFragment extends Fragment {
    /**
     * 日志标签
     */
    public static final String TAG = "zy";
    /**
     * 百度地图组件
     */
    private MapView mMapView;
    private BaiduMap mBaiduMap;
    /**
     * 锁定镜头在当前中点的按钮
     */
    private Button btn_location;
    /**
     * 是否锁定镜头
     */
    private boolean mLockCenter = true;
    /**
     * 默认的地图缩放级别 百度地图默认级别为3-21
     */
    private static final int DEFAULT_ZOOM = 19;
    private static final int DEFAULT_MAX_ZOOM = 21;
    private static final int DEFAULT_MIN_ZOOM = 14;
    /**
     * 百度定位
     */
    private LocationClient mLocationClient;
    /**
     * 当前所在位置的覆盖物
     */
    BitmapDescriptor mCurrentMarker;
    /**
     * 地图上显示当前用户的经纬度
     */
    private LatLng myPos;


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        Log.i(TAG, "onCreateView");
        View view = inflater.inflate(R.layout.fragment_map, container, false);

        initBtnLocation(view);//初始化锁定镜头到当前位置的按钮
        initMapView(view);//初始化地图组件
        initMapOption();//设置地图的属性
        initLocalPosition();//读取上次坐标，设置初始的位置
        initLocationClient();//设置百度定位器

        return view;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        Log.i(TAG, "onCreate");
        super.onCreate(savedInstanceState);

//        if (mMapView != null)
//            mMapView.onCreate(getContext(), savedInstanceState);
    }

    private final void initBtnLocation(View view) {
        btn_location = (Button) view.findViewById(R.id.btn_location);
        btn_location.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (myPos == null) {
                    Toast.makeText(getContext(), "正获取当前定位..", Toast.LENGTH_SHORT).show();
                } else {
                    updateMap();
                }
            }
        });
    }

    private final void initMapView(View view) {
        mMapView = (MapView) view.findViewById(R.id.bmapView);
    }

    /**
     * 初始化地图的显示区域
     */
    private final void initLocalPosition() {
        if (mMapView != null) {
            if (restorePos())
                updateMap();
        }
    }

    /**
     * 从本地存储获取上一次的坐标
     *
     * @return 是否存在上一次的坐标
     */
    private final boolean restorePos() {
        PositionModel position = new PositionModel(getContext());
        if (position.getPositionX() >= 0 && position.getPositionY() >= 0) {
            myPos = new LatLng(position.getPositionX(), position.getPositionY());
            return true;
        }
        return false;
    }

    /**
     * 向本地存储写入当前的坐标
     */
    private final void savePos(double lat, double lng) {
        PositionModel position = new PositionModel(getContext());
        position.setPositionX(lat);
        position.setPositionY(lng);
    }

    /**
     * 更新地图的中点和缩放等级
     */
    private final void updateMap() {
        if (myPos != null) {
            //设置地图状态 缩放级别【3-21】
            MapStatusUpdate newMapSatus = MapStatusUpdateFactory.newLatLngZoom(myPos, DEFAULT_ZOOM);
            mBaiduMap.setMapStatus(newMapSatus);
            changeLockCenter(true);
        }
    }

    /**
     * 设置百度地图的属性
     */
    private final void initMapOption() {
        if (mMapView == null) {
            createMap();
        } else {
            initMap();
        }

        mBaiduMap.setMapType(BaiduMap.MAP_TYPE_NORMAL);//普通地图
        mBaiduMap.setMaxAndMinZoomLevel(DEFAULT_MAX_ZOOM, DEFAULT_MIN_ZOOM);
        mBaiduMap.setMyLocationEnabled(true);//开启定位图层
        mBaiduMap.setOnMapStatusChangeListener(new BaiduMap.OnMapStatusChangeListener() {
            @Override
            public void onMapStatusChangeStart(MapStatus mapStatus) {
                changeLockCenter(false);
            }

            @Override
            public void onMapStatusChange(MapStatus mapStatus) {
            }

            @Override
            public void onMapStatusChangeFinish(MapStatus mapStatus) {
            }
        });
    }

    /**
     * 不采用xml布局文件生成mapView时，可采用代码方式建一个mapView
     * 设置百度地图的属性
     */
    private final void createMap() {
        BaiduMapOptions options = new BaiduMapOptions();
        options.compassEnabled(false);//不允许指南针
        options.logoPosition(LogoPosition.logoPostionRightBottom);//baidu logo显示在地图右下角
        options.zoomControlsEnabled(false);//缩放控件不可用
        options.scaleControlEnabled(true);//比例尺控件可用
        if (restorePos()) {//获取上一次离开app时的坐标值
            //设置初始的坐标
            options.mapStatus(new MapStatus.Builder().target(myPos).zoom(DEFAULT_ZOOM).build());
        }
        mMapView = new MapView(getContext(), options);
        mBaiduMap = mMapView.getMap();
    }

    /**
     * 采用xml布局文件生成mapView并调用findViewById绑定控件后
     * 设置百度地图的属性
     */
    private final void initMap() {
        mBaiduMap = mMapView.getMap();
        mBaiduMap.getUiSettings().setCompassEnabled(false);//不允许指南针
        mMapView.setLogoPosition(LogoPosition.logoPostionRightBottom);//baidu logo显示在地图右下角
        mMapView.showZoomControls(false);//缩放控件不可用
        mMapView.showScaleControl(true);//比例尺控件可用
    }

    /**
     * 初始化百度定位器
     */
    private void initLocationClient() {
        mLocationClient = new LocationClient(getContext().getApplicationContext());
        LocationClientOption option = new LocationClientOption();
        option.setLocationMode(LocationClientOption.LocationMode.Device_Sensors);//可选，默认高精度，设置定位模式，高精度，低功耗，仅设备
        //返回国测局经纬度坐标系：gcj02 返回百度墨卡托坐标系 ：bd09 返回百度经纬度坐标系 ：bd09ll
        option.setCoorType("bd0911");//可选，默认gcj02，设置返回的定位结果坐标系
        option.setScanSpan(5000);//可选，默认0，即仅定位一次，设置发起定位请求的间隔需要大于等于1000ms才是有效的
        option.setIsNeedAddress(true);//可选，设置是否需要地址信息，默认不需要
        option.setOpenGps(true);//可选，默认false,设置是否使用gps
        option.setLocationNotify(true);//可选，默认false，设置是否当gps有效时输出GPS结果
        option.setIsNeedLocationDescribe(true);//可选，默认false，设置是否需要位置语义化结果，可以在BDLocation.getLocationDescribe里得到，结果类似于“在北京天安门附近”
        option.setIsNeedLocationPoiList(true);//可选，默认false，设置是否需要POI结果，可以在BDLocation.getPoiList里得到
        option.setIgnoreKillProcess(true);//可选，默认true，定位SDK内部是一个SERVICE，并放到了独立进程，设置是否在stop的时候杀死这个进程，默认不杀死
        option.SetIgnoreCacheException(false);//可选，默认false，设置是否收集CRASH信息，默认收集
        //option.setEnableSimulateGps(true);//可选，默认false，设置是否需要过滤gps仿真结果，默认需要
        mLocationClient.setLocOption(option);
        mLocationClient.registerLocationListener(new BDLocationListener() {//注册监听函数
            @Override
            public void onReceiveLocation(BDLocation location) {
                //Log.i(TAG, printText(location));
                if (LocationStateDetermination.isError(location.getLocType())) {
                    LocationStateDetermination.judgeState(location.getLocType(), getContext());
                } else {
                    // 构造定位数据
                    MyLocationData locData = new MyLocationData.Builder()
                            //.accuracy(location.getRadius())//定位精度：米
                            // .direction(location.getDirection())// 此处设置开发者获取到的方向信息，顺时针0-360
                            .latitude(location.getLatitude())
                            .longitude(location.getLongitude())
                            .build();
                    //设置定位数据
                    mBaiduMap.setMyLocationData(locData);
                    myPos = new LatLng(location.getLatitude(), location.getLongitude());
                    if (mLockCenter) {
                        Log.i(TAG, printText(location));
                        updateMap();
                    }
                    //设置定位图层的配置（定位模式，是否允许方向信息，用户自定义定位图标）
                    mCurrentMarker = BitmapDescriptorFactory.fromResource(android.R.drawable.ic_menu_mylocation);
                    MyLocationConfiguration config = new MyLocationConfiguration(MyLocationConfiguration.LocationMode.NORMAL, true, mCurrentMarker);
                    mBaiduMap.setMyLocationConfigeration(config);
                }
            }
        });
    }

    /**
     * 改变是否锁定屏幕的按钮的状态
     *
     * @param lock true:改为锁定屏幕 false：取消锁定屏幕中心
     */
    private final void changeLockCenter(boolean lock) {
        if (lock) {
            mLockCenter = true;
            btn_location.setBackgroundResource(R.drawable.location);
        } else {
            mLockCenter = false;
            btn_location.setBackgroundResource(R.drawable.location_false);
        }
    }

    @Override
    public void onDestroy() {
        Log.i(TAG, "onDestroy");
        super.onDestroy();

        if (myPos != null) {
            savePos(myPos.latitude, myPos.longitude);
        }
        mLocationClient.stop();
        mMapView.onDestroy();//在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        Log.i(TAG, "onSaveInstanceState");
        super.onSaveInstanceState(outState);
        mMapView.onSaveInstanceState(outState);
    }

    @Override
    public void onResume() {
        Log.i(TAG, "onResume");
        //在activity执行onResume时执行mMapView. onResume()，实现地图生命周期管理
        mMapView.onResume();
        mLockCenter = true;
        mLocationClient.start();
        super.onResume();
    }

    @Override
    public void onPause() {
        Log.i(TAG, "onPause");
        super.onPause();
        //在activity执行onPause时执行mMapView. onPause ()，实现地图生命周期管理
        mMapView.onPause();
    }

    public final String printText(BDLocation location) {
        StringBuffer sb = new StringBuffer(256);
        sb.append("time : ");
        sb.append(location.getTime());
        sb.append("\nerror code : ");
        sb.append(location.getLocType());
        sb.append("\nlatitude : ");
        sb.append(location.getLatitude());
        sb.append("\nlontitude : ");
        sb.append(location.getLongitude());
        sb.append("\nradius : ");
        sb.append(location.getRadius());
        if (location.getLocType() == BDLocation.TypeGpsLocation) {// GPS定位结果
            sb.append("\nspeed : ");
            sb.append(location.getSpeed());// 单位：公里每小时
            sb.append("\nsatellite : ");
            sb.append(location.getSatelliteNumber());
            sb.append("\nheight : ");
            sb.append(location.getAltitude());// 单位：米
            sb.append("\ndirection : ");
            sb.append(location.getDirection());// 单位度
            sb.append("\naddr : ");
            sb.append(location.getAddrStr());
            sb.append("\ndescribe : ");
            sb.append("gps定位成功");

        } else if (location.getLocType() == BDLocation.TypeNetWorkLocation) {// 网络定位结果
            sb.append("\naddr : ");
            sb.append(location.getAddrStr());
            //运营商信息
            sb.append("\noperationers : ");
            sb.append(location.getOperators());
            sb.append("\ndescribe : ");
            sb.append("网络定位成功");
        } else if (location.getLocType() == BDLocation.TypeOffLineLocation) {// 离线定位结果
            sb.append("\ndescribe : ");
            sb.append("离线定位成功，离线定位结果也是有效的");
        } else if (location.getLocType() == BDLocation.TypeServerError) {
            sb.append("\ndescribe : ");
            sb.append("服务端网络定位失败，可以反馈IMEI号和大体定位时间到loc-bugs@baidu.com，会有人追查原因");
        } else if (location.getLocType() == BDLocation.TypeNetWorkException) {
            sb.append("\ndescribe : ");
            sb.append("网络不同导致定位失败，请检查网络是否通畅");
        } else if (location.getLocType() == BDLocation.TypeCriteriaException) {
            sb.append("\ndescribe : ");
            sb.append("无法获取有效定位依据导致定位失败，一般是由于手机的原因，处于飞行模式下一般会造成这种结果，可以试着重启手机");
        }
        sb.append("\nlocationdescribe : ");
        sb.append(location.getLocationDescribe());// 位置语义化信息
        List<Poi> list = location.getPoiList();// POI数据
        if (list != null) {
            sb.append("\npoilist size = : ");
            sb.append(list.size());
            for (Poi p : list) {
                sb.append("\npoi= : ");
                sb.append(p.getId() + " " + p.getName() + " " + p.getRank());
            }
        }
        return sb.toString();
    }
}
