package com.fujinbang.internet;

import android.content.Context;
import android.graphics.Bitmap;
import android.support.annotation.Nullable;
import android.util.Log;

import com.android.volley.AuthFailureError;
import com.android.volley.NetworkResponse;
import com.android.volley.ParseError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.HttpHeaderParser;
import com.android.volley.toolbox.ImageRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;

import org.apache.http.message.BasicHeader;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by Administrator on 2016/5/6.
 */
public abstract class InternetRequest {

    private final static String TAG = "InternetRequest";

    private RequestQueue mRequestQueue;

    public InternetRequest(Context context) {
        mRequestQueue = Volley.newRequestQueue(context);
    }

    /**
     * 从网络上获取一段json
     *
     * @param url
     * @param listener
     */
    protected final void getJsonObject(String url, @Nullable JSONObject postJson, final OnResponseListener<JSONObject> listener) {
        final JsonObjectRequest request = new JsonObjectRequest(url, postJson, new Response.Listener<JSONObject>() {
            @Override
            public void onResponse(JSONObject jsonObject) {
                if (jsonObject != null)
                    Log.i(TAG, jsonObject.toString());
                if (listener != null && jsonObject != null) {
                    listener.onSuccess(jsonObject);
                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError volleyError) {
                if (listener != null && volleyError != null) {
                    listener.onError(volleyError.toString(), 0);
                }
            }
        }) {
            @Override
            protected Response<JSONObject> parseNetworkResponse(NetworkResponse response) {
                try {
                    String je = new String(response.data, "UTF-8");
                    return Response.success(new JSONObject(je), HttpHeaderParser.parseCacheHeaders(response));
                } catch (UnsupportedEncodingException var3) {
                    return Response.error(new ParseError(var3));
                } catch (JSONException var4) {
                    return Response.error(new ParseError(var4));
                }
            }
        };
        mRequestQueue.add(request);
    }

    protected final void postFile(String url, byte[] file, final OnResponseListener<JSONObject> listener) {
        FileRequest request = new FileRequest(url, file, new Response.Listener<JSONObject>() {
            @Override
            public void onResponse(JSONObject object) {
                if (listener != null)
                    listener.onSuccess(object);
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError volleyError) {
                if (listener != null && volleyError != null)
                    listener.onError(volleyError.toString(), 0);
            }
        });
        mRequestQueue.add(request);
    }

    class FileRequest extends Request<JSONObject> {

        byte[] mFile;
        Response.Listener<JSONObject> mListener;

        public FileRequest(String url, byte[] file, Response.Listener<JSONObject> listener, Response.ErrorListener errorListener) {
            this(-1, url, file, listener, errorListener);
        }


        public FileRequest(int method, String url, byte[] file, Response.Listener<JSONObject> listener, Response.ErrorListener errorListener) {
            super(method, url, errorListener);
            mFile = file;
            mListener = listener;
        }

        @Override
        protected Response<JSONObject> parseNetworkResponse(NetworkResponse response) {
            try {
                String je = new String(response.data, "UTF-8");
                return Response.success(new JSONObject(je), HttpHeaderParser.parseCacheHeaders(response));
            } catch (UnsupportedEncodingException var3) {
                return Response.error(new ParseError(var3));
            } catch (JSONException var4) {
                return Response.error(new ParseError(var4));
            }
        }

        @Override
        public Map<String, String> getHeaders() throws AuthFailureError {
            Map<String, String> headers = new HashMap<>();
            headers.put("Charset", "UTF-8");
            headers.put("Content-Type", "image/png");
            //headers.put("Accept-Encoding", "gzip,deflate");
            headers.put("Content-Transfer-Encoding", "binary");
            return headers;
        }

        @Override
        public byte[] getBody() throws AuthFailureError {
            return mFile;
        }

        @Override
        protected void deliverResponse(JSONObject object) {
            mListener.onResponse(object);
        }
    }

    /**
     * 从网络上获取一张图片
     *
     * @param url
     * @param maxWidth  图片最大宽度
     * @param maxHeight 图片最大长度
     * @param listener
     */
    protected final void getBitmap(String url, int maxWidth, int maxHeight, final OnResponseListener<Bitmap> listener) {
        ImageRequest request = new ImageRequest(url, new Response.Listener<Bitmap>() {
            @Override
            public void onResponse(Bitmap bitmap) {
                if (listener != null && bitmap != null) {
                    listener.onSuccess(bitmap);
                }
            }
        }, maxWidth, maxHeight, Bitmap.Config.ARGB_8888, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError volleyError) {
                if (listener != null && volleyError != null) {
                    listener.onError(volleyError.toString(), 0);
                }
            }
        });
        mRequestQueue.add(request);
    }

    public interface OnResponseListener<T> {
        void onSuccess(T object);

        void onError(String desc, int statusCode);
    }
}
