package com.fujinbang.activity;

import android.content.Context;
import android.graphics.drawable.AnimationDrawable;
import android.media.MediaPlayer;
import android.os.AsyncTask;
import android.support.v4.app.Fragment;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.baidu.location.BDLocation;
import com.baidu.location.Poi;
import com.fourmob.datetimepicker.date.DatePickerDialog;
import com.fourmob.datetimepicker.date.DatePickerDialog.OnDateSetListener;
import com.fujinbang.R;
import com.fujinbang.global.SimpleDataBase;
import com.fujinbang.internet.HttpConnRequest;
import com.fujinbang.map.LocationManager;
import com.fujinbang.seekhelp.DialogManager;
import com.fujinbang.seekhelp.MediaManager;
import com.sleepbot.datetimepicker.time.RadialPickerLayout;
import com.sleepbot.datetimepicker.time.TimePickerDialog;

import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;


/**
 * Created by VITO on 2016/3/19.
 * 求助界面
 */
public class SeekHelpFragment extends Fragment implements OnDateSetListener, TimePickerDialog.OnTimeSetListener {
    protected LinearLayout timepicker1, timepicker2;
    protected TextView textCount, timepicker1_date, timepicker1_time, timepicker2_date, timepicker2_time, textbonus;
    protected TextView textPoi;
    DatePickerDialog datePickerDialog;
    TimePickerDialog timePickerDialog;

    protected Spinner sexspinner;
    protected ArrayAdapter<CharSequence> adaptersex = null;

    protected Button addnum, minusnum, helpbtn;
    protected ImageButton microphone;
    protected EditText reqDes, numofpeople;
    protected ImageView helpActivity;

    String token = null;
    String starttime = null;
    String endtime = null;
    double locationX;
    double locationY;

    protected String helpUrl = "http://120.24.240.199:6789/help";

    protected DialogManager mDialogManager;
    protected View animView;
    protected FrameLayout play_sound;
    protected TextView record_time;
    private int mMinWidth; //最小的item宽度
    private int mMaxWidth; //最大的item宽度
    float sec;
    String fpath;
    private boolean isVoiceReq;
    private boolean canSubmit;
    private boolean locationPrepare;

    int code;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_seekhelp, container, false);
        SimpleDataBase simpleDataBase = new SimpleDataBase(getContext());
        token = simpleDataBase.getToken();
        isVoiceReq = false;
        canSubmit = false;
        locationPrepare = false;

        //获取屏幕的宽度
        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
        DisplayMetrics outMetrics = new DisplayMetrics();
        wm.getDefaultDisplay().getMetrics(outMetrics);
        mMaxWidth = (int) (outMetrics.widthPixels * 0.4f);
        mMinWidth = (int) (outMetrics.widthPixels * 0.15f);

        final Calendar calendar = Calendar.getInstance();
        datePickerDialog = DatePickerDialog.newInstance(this,
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH),
                false);

        timePickerDialog = TimePickerDialog.newInstance(this,
                calendar.get(Calendar.HOUR_OF_DAY),
                calendar.get(Calendar.MINUTE),
                false, false);//是否是24小时制，是否抖动。false，false


        helpActivity = (ImageView) view.findViewById(R.id.seekhelp_help);
        textCount = (TextView) view.findViewById(R.id.seekhelp_textcount);
        reqDes = (EditText) view.findViewById(R.id.seekhelp_reqdes);
        record_time = (TextView) view.findViewById(R.id.id_recoder_time);
        microphone = (ImageButton) view.findViewById(R.id.seekhelp_microphone);
        play_sound = (FrameLayout) view.findViewById(R.id.id_recoder_lenght);
        animView = view.findViewById(R.id.id_recoder_anim);
        timepicker1 = (LinearLayout) view.findViewById(R.id.seekhelp_timepicker1);
        timepicker2 = (LinearLayout) view.findViewById(R.id.seekhelp_timepicker2);
        timepicker1_date = (TextView) view.findViewById(R.id.seekhelp_timepicker1_date);
        timepicker1_time = (TextView) view.findViewById(R.id.seekhelp_timepicker1_time);
        timepicker2_date = (TextView) view.findViewById(R.id.seekhelp_timepicker2_date);
        timepicker2_time = (TextView) view.findViewById(R.id.seekhelp_timepicker2_time);
        textbonus = (TextView) view.findViewById(R.id.seekhelp_textbonus);
        addnum = (Button) view.findViewById(R.id.seekhelp_addnum);
        minusnum = (Button) view.findViewById(R.id.seekhelp_minusnum);
        numofpeople = (EditText) view.findViewById(R.id.seekhelp_numofpeople);
        sexspinner = (Spinner) view.findViewById(R.id.seekhelp_sexspinner);
        textPoi = (TextView) view.findViewById(R.id.seekhelp_poi);
        helpbtn = (Button) view.findViewById(R.id.seekhelp_helpbtn);

        helpActivity.setOnClickListener(mListener);
        reqDes.addTextChangedListener(mTextWatcher);
        microphone.setOnClickListener(mListener);
        play_sound.setOnClickListener(mListener);
        timepicker1.setOnClickListener(mListener);
        timepicker2.setOnClickListener(mListener);
        textbonus.addTextChangedListener(mTextWatcher);
        addnum.setOnClickListener(mListener);
        minusnum.setOnClickListener(mListener);
        helpbtn.setOnClickListener(mListener);

        this.adaptersex = new ArrayAdapter<CharSequence>(getContext(), R.layout.spinner_item, new String[]{"无所谓", "男", "女"});
        this.adaptersex.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        sexspinner.setAdapter(this.adaptersex);
        sexspinner.setSelection(0);

        return view;
    }

    TextWatcher mTextWatcher = new TextWatcher() {
        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            if (!isVoiceReq) {
                textCount.setText(reqDes.getText().length() + "/100");
            }
        }

        @Override
        public void afterTextChanged(Editable s) {
            if (timepicker1_date.getText().length() > 0
                    & timepicker2_date.getText().length() > 0
                    & textbonus.getText().length() > 0) {
                if ((!isVoiceReq & reqDes.getText().length() > 0) || isVoiceReq) {
                    canSubmit = true;
                    helpbtn.setBackgroundResource(R.drawable.login_btn);
                    helpbtn.setTextColor(getResources().getColor(android.R.color.white));
                }
            } else {
                canSubmit = false;
                helpbtn.setBackgroundResource(R.drawable.register_btn2);
            }
        }
    };

    protected OnClickListener mListener = new OnClickListener() {
        @Override
        public void onClick(View v) {
            switch (v.getId()){
                case R.id.seekhelp_help:
                    //跳转帮助界面
                    break;
                case R.id.seekhelp_microphone:
                    // 显示對話框在开始录音以后
                    isVoiceReq = true;
                    reqDes.setVisibility(View.GONE);
                    textCount.setVisibility(View.GONE);
                    mDialogManager = new DialogManager(getContext());
                    mDialogManager.setAudioFinishRecorderListener(new DialogManager.AudioFinishRecorderListener() {

                        public void onFinish(float seconds, String filePath) {
                            sec = seconds;
                            fpath = filePath;
                            record_time.setText(Math.round(seconds) + "\"");//显示语音时间
                            ViewGroup.LayoutParams lp = play_sound.getLayoutParams();
                            lp.width = (int) (mMinWidth + (mMaxWidth / 60f) * seconds);//对话框长度
                            play_sound.setVisibility(View.VISIBLE);
                            record_time.setVisibility(View.VISIBLE);
                        }
                    });
                    mDialogManager.showRecordingDialog();
                    break;
                case R.id.id_recoder_lenght:
                    //播放帧动画
                    animView.setBackgroundResource(R.drawable.play_anim);
                    AnimationDrawable animation = (AnimationDrawable) animView.getBackground();
                    animation.start();
                    //播放录音
                    MediaManager.playSound(fpath, new MediaPlayer.OnCompletionListener() {

                        public void onCompletion(MediaPlayer mp) {
                            //停止播放帧动画
                            animView.setBackgroundResource(R.drawable.adj);
                        }
                    });
                    break;
                case R.id.seekhelp_addnum:
                    int num1 = Integer.parseInt(numofpeople.getText().toString());
                    numofpeople.setText(String.valueOf(num1 + 1));
                    break;
                case R.id.seekhelp_minusnum:
                    int num2 = Integer.parseInt(numofpeople.getText().toString());
                    if (num2 > 1) {
                        num2 -= 1;
                        numofpeople.setText(String.valueOf(num2));
                    }
                    break;
                case R.id.seekhelp_timepicker1:
                case R.id.seekhelp_timepicker2:
                    datePickerDialog.setVibrate(false);//是否抖动
                    datePickerDialog.setYearRange(1985, 2028);//设置年份区间
                    datePickerDialog.setCloseOnSingleTapDay(false);//选择后是否消失
                    datePickerDialog.show(getFragmentManager(), v.getId() == R.id.seekhelp_timepicker1 ? "time1" : "time2");//展示dialog，传一个tag参数
                    break;
                case R.id.seekhelp_helpbtn:
                    if (canSubmit){
                        if (locationPrepare){
                            new helpTask().execute(
                                    token,
                                    textbonus.getText().toString(),
                                    numofpeople.getText().toString(),
                                    reqDes.getText().toString());
                        } else {
                            Toast.makeText(getContext(), "正在定位中，请稍候", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(getContext(), "请填写完整求助信息", Toast.LENGTH_SHORT).show();
                    }
                    break;
                default:
                    break;
            }
        }
    };

    @Override
    public void onDateSet(DatePickerDialog datePickerDialog, int year, int month, int day) {
        if (datePickerDialog.getTag().equals("time1")) {
            timepicker1_date.setText((month + 1) + "-" + day);
            starttime = year + "-" + (month + 1) + "-" + day;
        } else {
            timepicker2_date.setText((month + 1) + "-" + day);
            endtime = year + "-" + (month + 1) + "-" + day;
        }
        //启动时间选择器
        timePickerDialog.setVibrate(false);//是否抖动
        timePickerDialog.setCloseOnSingleTapMinute(false);//选择后是否消失
        timePickerDialog.show(getFragmentManager(), datePickerDialog.getTag());//展示dialog，传一个tag参数
    }

    @Override
    public void onTimeSet(RadialPickerLayout view, int hourOfDay, int minute) {
        if (timePickerDialog.getTag().equals("time1")) {
            timepicker1_time.setText(hourOfDay + ":" + minute);
            starttime += " " + hourOfDay + ":" + minute + ":00";
            Log.e("st",starttime);
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            try {
                starttime = format.format(format.parse(starttime));
            } catch (Exception e){e.printStackTrace();}
        } else {
            timepicker2_time.setText(hourOfDay + ":" + minute);
            endtime += " " + hourOfDay + ":" + minute + ":00";
            Log.e("et",endtime);
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            try {
                endtime = format.format(format.parse(endtime));
            } catch (Exception e){e.printStackTrace();}
        }
    }

    class helpTask extends AsyncTask<String, Integer, String> {
        protected String doInBackground(String... params) {
            try {
                JSONObject obj = new JSONObject();
                obj.put("token", params[0]);
                obj.put("bonus", params[1]);
                obj.put("starttime", starttime);
                obj.put("endtime", endtime);
                String location = "{'x':"+locationX+",'y':"+locationY+"}";
                Log.e("ccc",location);
                obj.put("location", location);
                obj.put("needpeoplenum", params[2]);
                if (isVoiceReq) {
                    JSONObject voice = new JSONObject(fpath);
                    obj.put("voice", voice);
                } else {
                    obj.put("desc", params[3]);
                }
                return HttpConnRequest.request(helpUrl, "POST", obj);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        protected void onPostExecute(String result) {//在主线程中执行，方法参数为任务执行结果
            if (result == null) {
                Toast.makeText(getContext(), "网络未连接，请检查网络连接后重新登录", Toast.LENGTH_LONG).show();
            } else {
                if (getJsonData(result) == 1) {
                    Toast.makeText(getContext(), "发布成功！", Toast.LENGTH_LONG).show();
                    //跳转至消息界面
                    SeekHelpFragment.this.getFragmentManager().beginTransaction().replace(R.id.contain, new ConversationFragment()).commit();
                } else {
                    Toast.makeText(getContext(), "发布失败！积分不足", Toast.LENGTH_LONG).show();
                }
            }
        }
    }

    private int getJsonData(String jsonResult) {
        try {
            JSONObject Obj = new JSONObject(jsonResult);
            if (Obj.has("code")){
                code = Obj.getInt("code");
                return code;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    /**
     * 获得当前定位的标志性地名
     */
    private final void getPoi() {
        final LocationManager manager = LocationManager.getInstance(getContext());
        manager.addOnLocationListener(new LocationManager.OnLocationListener() {
            @Override
            public void onRecieveLocation(BDLocation location) {
                locationX = location.getLatitude();
                locationY = location.getLongitude();
                locationPrepare = true;
                List<Poi> list = location.getPoiList();
                for (Poi poi : list) {
                    Log.i("zy", poi.getName() + poi.getId());
                }
                if (list.size() != 0) {
                    textPoi.setText(list.get(0).getName());
                    manager.removeOnLocationListener(this);
                }
            }
        });
        manager.requestRightNow();
    }

    @Override
    public void onPause() {
        super.onPause();
        MediaManager.pause();
    }

    @Override
    public void onResume() {
        super.onResume();
        MediaManager.resume();
        getPoi();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        MediaManager.release();
    }

}
