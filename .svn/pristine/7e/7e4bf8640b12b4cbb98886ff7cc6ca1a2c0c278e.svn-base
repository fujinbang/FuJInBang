package com.fujinbang.presenter;

import android.util.Log;
import android.view.View;

import com.fujinbang.activity.iactivity.IMissionActivity;
import com.fujinbang.global.SimpleDataBase;
import com.fujinbang.internet.SignRequest;
import com.fujinbang.view.CheckInButton;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
 * Created by Administrator on 2016/4/23.
 */
public class SignPresenter implements View.OnClickListener {

    private IMissionActivity view;
    private SignRequest request;
    private SimpleDataBase db;

    public SignPresenter(IMissionActivity view) {
        this.view = view;
    }

    public final void updateSignInfo() {
        String token = getDateBase().getToken();

        getSignRequest().getSignInfo(token, new SignRequest.OnSignListener() {
            @Override
            public void onSuccess(int days, String date) {

                getDateBase().putLastSignDate(date);
                getDateBase().putSignDays(days);

                if (isCheckInToday(date)) {
                    view.setCheck(true);
                    view.setIntegration(getIntegration(days));
                } else if (isCheckInYesterday(date)) {
                    view.setCheck(false);
                    view.setDays(days);
                } else {
                    view.setCheck(false);
                    view.setDays(0);
                }
            }

            @Override
            public void onError(String desc) {
                view.setCheck(true);
                view.setIntegration(0);
                view.showToast("网络异常！");
                Log.e("zy", "SignPresenter error: " + desc);
            }
        });
    }

    public void updateSignInfoFromLocal() {
        String date = getDateBase().getLastSignDate();
        int days = getDateBase().getSignDays();
        Log.i("zy", "sign presenter LastSignDate:" + date + " ,signdays:" + days);
        if (date != "") {
            if (isCheckInToday(date)) {
                view.setCheck(true);
                view.setIntegration(getIntegration(days));
            } else if (isCheckInYesterday(date)) {
                view.setCheck(false);
                view.setDays(days);
            } else {
                view.setCheck(false);
                view.setDays(0);
            }
        }
    }

    private final SignRequest getSignRequest() {
        if (request == null)
            request = new SignRequest(view.getActivityContext());
        return request;
    }

    private final boolean isCheckInToday(String date) {
        try {
            Calendar theLastDay = getLastDay(date);
            Calendar today = Calendar.getInstance();

            int year1 = theLastDay.get(Calendar.YEAR);
            int year2 = today.get(Calendar.YEAR);

            if (year1 == year2) {
                int day1 = theLastDay.get(Calendar.DAY_OF_YEAR);
                int day2 = today.get(Calendar.DAY_OF_YEAR);
                return day1 == day2;
            }

            return false;
        } catch (ParseException e) {
            Log.e("zy", "signPresenter parse date error");
        }
        return false;
    }

    private final boolean isCheckInYesterday(String date) {
        try {
            Calendar theLastDay = getLastDay(date);
            Calendar today = Calendar.getInstance();

            int year1 = theLastDay.get(Calendar.YEAR);
            int year2 = today.get(Calendar.YEAR);

            if (year1 == year2) {//是否是同一年的相邻两天
                int day1 = theLastDay.get(Calendar.DAY_OF_YEAR);
                int day2 = today.get(Calendar.DAY_OF_YEAR);
                return day2 - day1 == 1;

            } else if (year2 - year1 == 1) {//是否刚好是下一年的第一天
                return theLastDay.get(Calendar.DAY_OF_YEAR) == theLastDay.getActualMaximum(Calendar.DAY_OF_YEAR)
                        && today.get(Calendar.DAY_OF_YEAR) == 1;
            }
            return false;
        } catch (ParseException e) {
            Log.e("zy", "SignPresenter parse date error" + e);
        }
        return false;
    }

    private SimpleDataBase getDateBase() {
        if (db == null) db = new SimpleDataBase(view.getActivityContext());
        return db;
    }

    private Calendar getLastDay(String date) throws ParseException {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date lastDay = format.parse(date);
        Calendar theLastDay = Calendar.getInstance();
        theLastDay.setTime(lastDay);
        return theLastDay;
    }

    private int getIntegration(int days) {
        if (days > 7) return 7;
        return days;
    }

    public void checkIn() {
        String token = getDateBase().getToken();
        getSignRequest().signIn(token, new SignRequest.OnSignListener() {
            @Override
            public void onSuccess(int days, String dateOrDesc) {
                view.setIntegration(getIntegration(days));
                view.setCheck(true);
            }

            @Override
            public void onError(String desc) {
                view.showToast("网络异常");
                Log.e("zy", "Sign Presenter sign in error :" + desc);
            }
        });
    }

    @Override
    public void onClick(View v) {
        checkIn();
    }
}
