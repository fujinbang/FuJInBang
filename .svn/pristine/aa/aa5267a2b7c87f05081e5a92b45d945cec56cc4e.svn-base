package com.fujinbang.activity;

import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.AnimationDrawable;
import android.media.MediaPlayer;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.FrameLayout;
import android.widget.GridLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.fujinbang.R;
import com.fujinbang.global.MissionDetail;
import com.fujinbang.global.SimpleDataBase;
import com.fujinbang.global.StatusBarCompat;
import com.fujinbang.global.TimeCalculator;
import com.fujinbang.internet.HttpConnRequest;
import com.fujinbang.seekhelp.MediaManager;
import com.hyphenate.easeui.widget.CircleTransform;

import org.json.JSONArray;
import org.json.JSONObject;
import org.w3c.dom.Text;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Created by VITO on 2016/5/18.
 * 任务详情界面
 */
public class MissionDetailActivity extends BaseActivity implements View.OnClickListener{

    protected ImageView mission_detail_back,announcer_img;
    protected TextView announcer_name,txt_desc,start_time,end_time,rest_time,urge,status,bonus,add_bonus,item1_txt,item2_txt;
    protected GridLayout attender_list;
    protected RelativeLayout item1,item2,item3,item4;

    private View animView;
    private FrameLayout play_sound;
    private TextView record_time;
    float sec;
    String fpath;
    boolean isVoiceReq = false;
    private boolean isAnnouncer;
    private String myToken;

    HashMap<String, Object> mission;
    List<String> allNick = new ArrayList<>();
    List<String> allAvatar = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_mission_detail);
        Intent it = this.getIntent();
        allNick = it.getExtras().getStringArrayList("allNick");
        allAvatar = it.getExtras().getStringArrayList("allAvatar");
        mission = MissionDetail.getInstance().getMission(it.getExtras().getInt("groupPosition"));
        isAnnouncer = mission.containsKey("isAnnouncer");
        SimpleDataBase simpleDataBase = new SimpleDataBase(this);
        myToken = simpleDataBase.getToken();
        initView();
    }

    private void initView() {
        mission_detail_back = (ImageView) findViewById(R.id.mission_detail_back);
        announcer_img = (ImageView) findViewById(R.id.mission_detail_announcer_img);
        announcer_name = (TextView) findViewById(R.id.mission_detail_announcer_name);
        attender_list = (GridLayout)findViewById(R.id.mission_detail_attender_list);
        txt_desc = (TextView) findViewById(R.id.mission_detail_txt_desc);
        start_time = (TextView) findViewById(R.id.mission_detail_starttime);
        end_time = (TextView) findViewById(R.id.mission_detail_endtime);
        rest_time = (TextView) findViewById(R.id.mission_detail_rest_time);
        urge = (TextView) findViewById(R.id.mission_detail_urge);
        status = (TextView) findViewById(R.id.mission_detail_status);
        bonus = (TextView) findViewById(R.id.mission_detail_bonus);
        add_bonus = (TextView) findViewById(R.id.mission_detail_add_bonus);
        item1 = (RelativeLayout) findViewById(R.id.mission_detail_item1);
        item2 = (RelativeLayout) findViewById(R.id.mission_detail_item2);
        item3 = (RelativeLayout) findViewById(R.id.mission_detail_item3);
        item4 = (RelativeLayout) findViewById(R.id.mission_detail_item4);
        item1_txt = (TextView) findViewById(R.id.mission_detail_item1_txt);
        item2_txt = (TextView) findViewById(R.id.mission_detail_item2_txt);

        mission_detail_back.setOnClickListener(this);
        item1.setOnClickListener(this);
        item2.setOnClickListener(this);
        item3.setOnClickListener(this);
        item4.setOnClickListener(this);
        txt_desc.setText(mission.get("desc").toString());
        start_time.setText(mission.get("start_time").toString());
        end_time.setText(mission.get("end_time").toString());
        if (mission.containsKey("restTime")){
            rest_time.setText(mission.get("restTime").toString());
        }
        bonus.setText(mission.get("bonus").toString());

        if (isAnnouncer){
            item1_txt.setText("确认完成任务");
            item2_txt.setText("取消任务");
            urge.setVisibility(View.VISIBLE);
            add_bonus.setVisibility(View.VISIBLE);
            urge.setOnClickListener(this);
            add_bonus.setOnClickListener(this);
        } else {
            item1_txt.setText("完成任务");
            item2_txt.setText("放弃任务");
            urge.setVisibility(View.GONE);
            add_bonus.setVisibility(View.GONE);
        }

        //加载昵称与头像
        initNickAndAvatar();

        //剩余时间循环
        detailTimeThread.start();
        missionDetailTimeHandler.sendEmptyMessageDelayed(1, 1000);


        /*
        record_time = (TextView) findViewById(R.id.mission_detail_recoder_time);
        record_time.setText("" + "\"");
        play_sound = (FrameLayout) findViewById(R.id.mission_detail_recoder_lenght);
        animView = findViewById(R.id.mission_detail_recoder_anim);
        play_sound.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //播放帧动画
                animView.setBackgroundResource(R.drawable.play_anim);
                AnimationDrawable animation = (AnimationDrawable) animView.getBackground();
                animation.start();
                //播放录音
                MediaManager.playSound(fpath, new MediaPlayer.OnCompletionListener() {

                    public void onCompletion(MediaPlayer mp) {
                        //停止播放帧动画
                        animView.setBackgroundResource(R.drawable.adj);
                    }
                });
            }
        });*/

    }

    private void initAvatar(String avatar, ImageView imageView){
        Glide.with(this)
                .load(avatar)
                .diskCacheStrategy(DiskCacheStrategy.ALL)
                .transform(new CircleTransform(this))
                .into(imageView);
    }

    private void addViewToGridLayout(String nick, String avatar){
        View view = View.inflate(MissionDetailActivity.this, R.layout.item_information, null);
        TextView txt = (TextView) view.findViewById(R.id.item_information_name);
        ImageView img = (ImageView) view.findViewById(R.id.item_information_img);
        txt.setText(nick);
        initAvatar(avatar, img);
        attender_list.addView(view);
    }

    private void initNickAndAvatar() {
        announcer_name.setText(allNick.get(0));
        initAvatar(allAvatar.get(0), announcer_img);
        for (int i = 1;i<allAvatar.size();i++){
            addViewToGridLayout(allNick.get(i), allAvatar.get(i));
        }
    }

    public static void startActivity(Context context, int groupPosition, ArrayList<String> allNick, ArrayList<String> allAvatar) {
        Intent intent = new Intent(context, MissionDetailActivity.class);
        intent.putExtra("groupPosition", groupPosition);
        intent.putStringArrayListExtra("allNick", allNick);
        intent.putStringArrayListExtra("allAvatar",allAvatar);
        context.startActivity(intent);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.mission_detail_back:
                finish();
                break;
            case R.id.mission_detail_urge:
                //催促接单者
                break;
            case R.id.mission_detail_add_bonus:
                //追加奖励
                break;
            case R.id.mission_detail_item1:
                if (isAnnouncer){
                    missionCompleted();
                }
                break;
            case R.id.mission_detail_item2:
                break;
            case R.id.mission_detail_item3:
                //联系客服
                break;
            case R.id.mission_detail_item4:
                //举报
                break;
            default:
                break;
        }
    }

    protected void missionCompleted(){
        new AsyncTask<String, Integer, String>() {
            @Override
            protected String doInBackground(String... params) {
                String result = null;
                try{
                    JSONObject obj = new JSONObject();
                    obj.put("token",params[0]);
                    obj.put("helpinfoid",Integer.parseInt(params[1]));
                    result = HttpConnRequest.request("http://120.24.240.199:6789/help/finish","POST",obj);
                }catch (Exception e){e.printStackTrace();}
                return result;
            }

            @Override
            protected void onPostExecute(String result){
                if (result!=null){
                    try{
                        JSONObject obj = new JSONObject(result);
                        if (obj.getInt("code") == 1){
                            finish();
                        }
                    }catch (Exception e){e.printStackTrace();}
                }
            }
        }.execute(myToken, mission.get("helpid").toString());
    }

    protected Handler missionDetailTimeHandler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            if (msg.what ==1) {
                Log.e("ccc","handle还在跑");
                if (mission.containsKey("restTime")){
                    rest_time.setText(mission.get("restTime").toString());
                    if (isRush && rest_time.getCurrentTextColor()!=0xffff0000){
                        rest_time.setTextColor(0xffff0000);
                    }
                }
                if (!isFinished){
                    missionDetailTimeHandler.sendEmptyMessageDelayed(1,1000);
                } else {
                    status.setText("已结束");
                }
            }
        }
    };

    DecimalFormat df = new DecimalFormat("00");
    protected boolean isFinished = false;
    protected boolean isRush = false;
    protected Thread detailTimeThread = new Thread() {
        public void run() {
            while (!isFinished) {
                if (mission.containsKey("restTime") && mission.get("restTime").toString().equals("0:00:00")) {
                    isFinished = true;
                    break;
                }
                try {
                    Log.e("ccc","timeThread还在跑");
                    sleep(1000);
                    long second = TimeCalculator.getRestTime(mission.get("end_time").toString());
                    long hour = second / 3600;
                    long minute = second % 3600 / 60;
                    long realSecond = second % 3600 % 60;
                    String rest = hour + ":" + df.format(minute) + ":" + df.format(realSecond);
                    if (hour<24){
                        isRush = true;
                    }
                    mission.put("restTime", rest);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    };

    @Override
    public void onPause(){
        super.onPause();
        isFinished = true;
    }
}
