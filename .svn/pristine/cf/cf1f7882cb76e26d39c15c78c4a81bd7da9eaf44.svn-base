package com.fujinbang.conversation;

import android.content.Context;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;

/**
 * Created by VITO on 2016/6/3.
 */
public class GroupAvatarView extends ViewGroup {

    //private static final String TAG = "GroupAvatarView";

    public GroupAvatarView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    public GroupAvatarView(Context context) {
        super(context);
    }

    public GroupAvatarView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        /**
         * 遍历所有childView根据其宽和高，以及margin进行布局
         */
        int childCount = getChildCount();
        /*
        for (int i = 0; i < childCount; i++){
            View childView = getChildAt(i);
            int width = childView.getMeasuredWidth();
            int height = childView.getMeasuredHeight();
            width = childCount%4==0 ? getMeasuredWidth()/2 : width/childCount;
            height = childCount%2==0 ? height/2 : height/childCount;
        }*/
        int width = 0;
        int height = 0;
        switch (childCount) {
            case 1:
                width = getMeasuredWidth();
                height = getMeasuredHeight();
                getChildAt(0).layout(l, t, l + width, t + height);
                break;
            case 2:
                width = getMeasuredWidth() / 2;
                height = getMeasuredHeight() / 2;
                getChildAt(0).layout(l, 3 * t / 4, l + width, 3 * t / 4 + height);
                getChildAt(1).layout(l + width, 3 * t / 4, l + width, 3 * t / 4 + height);
                break;
            case 3:
                width = getMeasuredWidth() / 3;
                height = getMeasuredHeight() / 3;
                getChildAt(0).layout(l, 3 * t / 4, l + width, 3 * t / 4 + height);
                getChildAt(1).layout(l + width, 3 * t / 4, l + width + width, 3 * t / 4 + height);
                getChildAt(2).layout(l + width + width, 3 * t / 4, l + width + width + width, 3 * t / 4 + height);
                break;
            case 4:
                width = getMeasuredWidth() / 2;
                height = getMeasuredHeight() / 2;
                getChildAt(0).layout(l, t, l + width, t + height);
                getChildAt(1).layout(l + width, t, l + width + width, t + height);
                getChildAt(2).layout(l, t + height, l + width, t + height + height);
                getChildAt(3).layout(l + width, t + height, l + width + width, t + height + height);
                break;
            default:
                break;
        }
    }
}
