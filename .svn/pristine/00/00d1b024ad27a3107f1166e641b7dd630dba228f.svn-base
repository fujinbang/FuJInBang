package com.fujinbang.activity;


import android.content.Intent;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.os.Bundle;
import android.util.Log;
import android.util.Pair;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ExpandableListView;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.ScrollView;
import android.widget.Toast;

import com.fujinbang.R;
import com.fujinbang.conversation.ConversationListAdapter;
import com.fujinbang.conversation.FakeCoversationListAdapter;
import com.fujinbang.conversation.HelpListAdapter;
import com.fujinbang.conversation.SystemMsgAdapter;
import com.fujinbang.global.MissionDetail;
import com.fujinbang.global.SimpleDataBase;
import com.fujinbang.internet.HttpConnRequest;
import com.hyphenate.EMConnectionListener;
import com.hyphenate.EMConversationListener;
import com.hyphenate.EMError;
import com.hyphenate.chat.EMClient;
import com.hyphenate.chat.EMConversation;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * Created by VITO on 2016/4/24.
 * 消息界面
 */
public class ConversationFragment extends Fragment {
    private final static int MSG_REFRESH = 2;

    HttpConnRequest httpConnRequest = new HttpConnRequest();
    ScrollView sv;
    ExpandableListView expandListView;
    ListView helpListView, sysMsgListView;
    ConversationListAdapter conversationListAdapter;
    HelpListAdapter helpListAdapter;
    SystemMsgAdapter systemMsgAdapter;
    private List<EMConversation> groupList;
    private HashMap<String, HashMap<String, Object>> childList;
    private List<HashMap<String, Object>> helpList;
    private List<EMConversation> sysMsg;
    FakeCoversationListAdapter fakeCoversationListAdapter;

    protected boolean isConflict;

    Handler mhandler = new Handler(){

        @Override
        public void handleMessage(Message msg) {
            if (msg.what ==1) {
                fakeCoversationListAdapter.notifyDataSetChanged();
                if (!childList.isEmpty()){
                    mhandler.sendEmptyMessageDelayed(1,1000);
                }
            }
        }
    };
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_conversation, container, false);
        SimpleDataBase simpleDataBase = new SimpleDataBase(getContext());
        /*
        groupList.addAll(loadConversationList());

        expandListView = (ExpandableListView) view.findViewById(R.id.expand_listview);
        expandListView.setGroupIndicator(null);
        expandListView.setEmptyView(view.findViewById(R.id.view_empty));
        conversationListAdapter = new ConversationListAdapter(getContext(), expandListView, groupList, childList);
        expandListView.setAdapter(conversationListAdapter);
        expandListView.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() {
            @Override
            public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) {
                Log.i("zy", "onClickGroupView" + groupPosition);
                ChatActivity.startActivity(getContext(), groupList.get(groupPosition).getUserName());
                return true;
            }
        });*/

        HashMap<String, Object> map = new HashMap<>();
        map.put("desc","我醉了");
        childList = new HashMap<>();
        childList.put("groupid", map);
        expandListView = (ExpandableListView) view.findViewById(R.id.expand_listview);
        expandListView.setGroupIndicator(null);
        fakeCoversationListAdapter = new FakeCoversationListAdapter(getContext(), expandListView,childList);
        expandListView.setAdapter(fakeCoversationListAdapter);
        fakeCoversationListAdapter.start();
        mhandler.sendEmptyMessageDelayed(1, 1000);

        //new helpTask().execute(simpleDataBase.getPhoneNum());
        helpListView = (ListView) view.findViewById(R.id.help_listview);
        helpListView.setEmptyView(view.findViewById(R.id.view_empty));
        helpListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                PersonalHelpActivity.startActivity(getContext(),position);
            }
        });

        sysMsgListView = (ListView) view.findViewById(R.id.sys_listview);
        sysMsgListView.setEmptyView(view.findViewById(R.id.view_empty));
        systemMsgAdapter = new SystemMsgAdapter(getContext(),sysMsg);
        sysMsgListView.setAdapter(systemMsgAdapter);

        EMClient.getInstance().addConnectionListener(connectionListener);
        /*
        MissionDetail.getInstance().initialize(simpleDataBase.getPhoneNum(), new MissionDetail.OnMissionListener() {
            @Override
            public void onCall(HashMap<String, HashMap<String, Object>> mission,List<HashMap<String,Object>> invitedMission) {
                childList = mission;
                conversationListAdapter.notifyDataSetChanged();

                helpListAdapter = new HelpListAdapter(getContext(),invitedMission);
                helpListView.setAdapter(helpListAdapter);
            }
        });*/

        return view;
    }

    private class helpTask extends AsyncTask<String,Integer,String>{
        @Override
        protected String doInBackground(String... params) {
            try {
                JSONObject object = new JSONObject();
                object.put("phonenum", params[0]);
                return httpConnRequest.request("http://120.24.240.199:6789/helpquery", "POST",object);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
        @Override
        protected void onPostExecute(String result){
            if (result!=null){
                helpList.clear();
                try {
                    JSONObject object = new JSONObject(result);
                    JSONArray invited = object.getJSONArray("invited");
                    for (int i = 0;i<invited.length();i++){
                        JSONObject misson = invited.getJSONObject(i);
                        HashMap<String,Object> hashMap = new HashMap<>();
                        hashMap.put("bonus",misson.getInt("bonus"));
                        hashMap.put("chatgroupid",misson.getString("chatgroupid"));
                        hashMap.put("start_time",misson.getString("start_time"));
                        hashMap.put("end_time",misson.getString("end_time"));
                        hashMap.put("neederid",misson.getInt("neederid"));
                        hashMap.put("desc", misson.getString("desc"));
                        hashMap.put("regDate",misson.getString("regDate"));
                        helpList.add(hashMap);
                        new neederNickname().execute(misson.getInt("neederid"),i);
                    }
                } catch (Exception e) {e.printStackTrace();}
                helpListView.getAdapter().notify();
            }
        }
    }

    private class neederNickname extends AsyncTask<Integer,Integer,String[]>{

        @Override
        protected String[] doInBackground(Integer... params) {
            try {
                JSONObject object = new JSONObject();
                object.put("id", params[0]);
                String[] data = new String[2];
                data[0]=httpConnRequest.request("http://120.24.240.199:6789/user/queryuserinfo", "POST",object);
                data[1]=String.valueOf(params[1]);
                return data;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
        @Override
        protected void onPostExecute(String[] result){
            try{
                JSONObject object = new JSONObject(result[0]);
                if (object.getInt("code") == 1){
                    JSONObject data = object.getJSONObject("data");
                    helpList.get(Integer.parseInt(result[1])).put("nickName", data.getString("nickName"));
                }
            }catch (Exception e){e.printStackTrace();}
        }
    }

    protected EMConversationListener convListener = new EMConversationListener() {

        @Override
        public void onCoversationUpdate() {
            refresh();
        }

    };

    /**
     * 获取会话列表
     **/
    protected List<EMConversation> loadConversationList() {
        // 获取所有会话，包括陌生人
        Map<String, EMConversation> conversations = EMClient.getInstance().chatManager().getAllConversations();
        // 过滤掉messages size为0的conversation
        /**
         * 如果在排序过程中有新消息收到，lastMsgTime会发生变化
         * 影响排序过程，Collection.sort会产生异常
         * 保证Conversation在Sort过程中最后一条消息的时间不变
         * 避免并发问题
         */
        List<Pair<Long, EMConversation>> sortList = new ArrayList<Pair<Long, EMConversation>>();
        synchronized (conversations) {
            for (EMConversation conversation : conversations.values()) {
                if (conversation.getAllMessages().size() != 0) {
                    if (conversation.getType() == EMConversation.EMConversationType.GroupChat) {
                        sortList.add(new Pair<Long, EMConversation>(conversation.getLastMessage().getMsgTime(), conversation));
                    }
                    if (conversation.getType() == EMConversation.EMConversationType.Chat) {
                        sysMsg.clear();
                        sysMsg.add(conversation);
                    }
                }
            }
        }
        List<EMConversation> list = new ArrayList<EMConversation>();
        for (Pair<Long, EMConversation> sortItem : sortList) {
            list.add(sortItem.second);
        }
        return list;
    }

    protected EMConnectionListener connectionListener = new EMConnectionListener() {

        @Override
        public void onDisconnected(int error) {
            if (error == EMError.USER_REMOVED || error == EMError.USER_LOGIN_ANOTHER_DEVICE) {
                isConflict = true;
            } else {
                handler.sendEmptyMessage(0);
            }
        }

        @Override
        public void onConnected() {
            handler.sendEmptyMessage(1);
        }
    };

    protected Handler handler = new Handler() {
        public void handleMessage(android.os.Message msg) {
            switch (msg.what) {
                case 0:
                    onConnectionDisconnected();
                    break;
                case 1:
                    onConnectionConnected();
                    break;

                case MSG_REFRESH: {
//                    groupList.clear();
//                    groupList.addAll(loadConversationList());
//                    expandListView.getAdapter().notify();
                    break;
                }
                default:
                    break;
            }
        }
    };

    /**
     * 连接到服务器
     */
    protected void onConnectionConnected() {
        //已连接
    }

    /**
     * 连接断开
     */
    protected void onConnectionDisconnected() {
        Toast.makeText(getContext(), "未连接到服务器", Toast.LENGTH_SHORT).show();
    }


    /**
     * 刷新页面
     */
    public void refresh() {
        if (!handler.hasMessages(MSG_REFRESH)) {
            handler.sendEmptyMessage(MSG_REFRESH);
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        refresh();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        EMClient.getInstance().removeConnectionListener(connectionListener);
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        if (isConflict) {
            outState.putBoolean("isConflict", true);
        }
    }
}