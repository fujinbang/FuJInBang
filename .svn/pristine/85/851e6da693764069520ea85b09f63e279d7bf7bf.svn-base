package com.fujinbang.view;

import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.NinePatchDrawable;
import android.os.Build;
import android.util.AttributeSet;
import android.util.Log;
import android.widget.ImageView;

import java.lang.ref.WeakReference;

/**
 * Created by Administrator on 2016/3/2.
 */
public class CircleImageView extends ImageView {
    public final static String TAG = "zy";

    public CircleImageView(Context context) {
        super(context);
    }

    public CircleImageView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public CircleImageView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    public CircleImageView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
        super(context, attrs, defStyleAttr, defStyleRes);
    }

//    @Override
//    protected void onDraw(Canvas canvas) {
//        if (getDrawable() != null) {
//            if (!(getDrawable() instanceof NinePatchDrawable)) {
//                Bitmap bitmap = ((BitmapDrawable) getDrawable()).getBitmap();
//                if (bitmap != null) {
//                    Matrix matrix = new Matrix();
//                    matrix.setScale(getWidth() * 1f / bitmap.getWidth(), getHeight() * 1f / bitmap.getHeight());
//
//                    int offset;
//                    if (bitmap.getWidth() > bitmap.getHeight()) {//横图
//                        offset = (bitmap.getWidth() - bitmap.getHeight()) / 2;
//                        matrix.postTranslate(-offset, 0);
//                    } else {
//                        offset = (bitmap.getHeight() - bitmap.getWidth()) / 2;
//                        matrix.postTranslate(0, -offset);
//                    }
//
//                    Paint paint = new Paint();
//                    int layer = canvas.saveLayer(0, 0, getWidth(), getHeight(), paint, Canvas.ALL_SAVE_FLAG);
//
//                    bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, false);
//                    canvas.drawBitmap(bitmap, 0, 0, paint);
//
//                    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
//                    Bitmap mask = getMaskBitmap(getWidth(), getHeight());
//                    canvas.drawBitmap(mask, 0, 0, paint);
//
//                    canvas.restoreToCount(layer);
//                }
//            }
//        }
//    }

    WeakReference<Bitmap> mWeakBitmap;
    Bitmap mMaskBitmap;
    Paint mPaint = new Paint();

    protected void onDraw(Canvas canvas) {
        //在缓存中取出bitmap
        Bitmap bitmap = mWeakBitmap == null ? null : mWeakBitmap.get();

        if (null == bitmap || bitmap.isRecycled()) {
            //拿到Drawable
            Drawable drawable = getDrawable();
            //获取drawable的宽和高
            int dWidth = drawable.getIntrinsicWidth();
            int dHeight = drawable.getIntrinsicHeight();

            if (drawable != null) {
                //创建bitmap
                bitmap = Bitmap.createBitmap(getWidth(), getHeight(),
                        Bitmap.Config.ARGB_8888);
                float scale = 1.0f;
                //创建画布
                Canvas drawCanvas = new Canvas(bitmap);
                //按照bitmap的宽高，以及view的宽高，计算缩放比例；因为设置的src宽高比例可能和imageview的宽高比例不同，这里我们不希望图片失真；

                // 如果图片的宽或者高与view的宽高不匹配，计算出需要缩放的比例；缩放后的图片的宽高，一定要大于我们view的宽高；所以我们这里取大值；
                scale = Math.max(getWidth() * 1.0f / dWidth, getHeight()
                        * 1.0f / dHeight);

                //scale = getWidth() * 1.0F / Math.min(dWidth, dHeight);

                //根据缩放比例，设置bounds，相当于缩放图片了
                drawable.setBounds(0, 0, (int) (scale * dWidth),
                        (int) (scale * dHeight));
                drawable.draw(drawCanvas);
                if (mMaskBitmap == null || mMaskBitmap.isRecycled()) {
                    mMaskBitmap = getMaskBitmap(getWidth(), getHeight());
                }
                // Draw Bitmap.
                mPaint.reset();
                mPaint.setFilterBitmap(false);
                mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
                //绘制形状
                drawCanvas.drawBitmap(mMaskBitmap, 0, 0, mPaint);
                mPaint.setXfermode(null);
                //将准备好的bitmap绘制出来
                canvas.drawBitmap(bitmap, 0, 0, null);
                //bitmap缓存起来，避免每次调用onDraw，分配内存
                mWeakBitmap = new WeakReference<Bitmap>(bitmap);
            }
        }
        //如果bitmap还存在，则直接绘制即可
        if (bitmap != null) {
            mPaint.setXfermode(null);
            canvas.drawBitmap(bitmap, 0.0f, 0.0f, mPaint);
            return;
        }

    }

    protected Bitmap getMaskBitmap(int width, int height) {
        Bitmap mask = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);

        Canvas canvas = new Canvas(mask);

        Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        canvas.drawCircle(width / 2, width / 2, width / 2f, paint);

        return mask;
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        int width = Math.min(getMeasuredWidth(), getMeasuredHeight());
        setMeasuredDimension(width, width);
        Log.i(TAG, "onMeasure: " + getMeasuredHeight() + " , " + getMeasuredWidth());
    }
}
